// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file message.proto (package discordpackage, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { GrpcMemberProfile } from "./member_pb.ts";

/**
 * @generated from enum discordpackage.GrpcMessageEventType
 */
export enum GrpcMessageEventType {
  /**
   * @generated from enum value: MESSAGE_EVENT_TYPE_UNSPECIFIED = 0;
   */
  MESSAGE_EVENT_TYPE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: MESSAGE_EVENT_TYPE_ADD = 1;
   */
  MESSAGE_EVENT_TYPE_ADD = 1,

  /**
   * @generated from enum value: MESSAGE_EVENT_TYPE_EDIT = 2;
   */
  MESSAGE_EVENT_TYPE_EDIT = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(GrpcMessageEventType)
proto3.util.setEnumType(GrpcMessageEventType, "discordpackage.GrpcMessageEventType", [
  { no: 0, name: "MESSAGE_EVENT_TYPE_UNSPECIFIED" },
  { no: 1, name: "MESSAGE_EVENT_TYPE_ADD" },
  { no: 2, name: "MESSAGE_EVENT_TYPE_EDIT" },
]);

/**
 * @generated from message discordpackage.GrpcMessageEvent
 */
export class GrpcMessageEvent extends Message<GrpcMessageEvent> {
  /**
   * @generated from field: discordpackage.GrpcMessageEventType type = 1;
   */
  type = GrpcMessageEventType.MESSAGE_EVENT_TYPE_UNSPECIFIED;

  /**
   * @generated from field: discordpackage.GrpcMessage message = 2;
   */
  message?: GrpcMessage;

  constructor(data?: PartialMessage<GrpcMessageEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "discordpackage.GrpcMessageEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(GrpcMessageEventType) },
    { no: 2, name: "message", kind: "message", T: GrpcMessage },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcMessageEvent {
    return new GrpcMessageEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcMessageEvent {
    return new GrpcMessageEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcMessageEvent {
    return new GrpcMessageEvent().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcMessageEvent | PlainMessage<GrpcMessageEvent> | undefined, b: GrpcMessageEvent | PlainMessage<GrpcMessageEvent> | undefined): boolean {
    return proto3.util.equals(GrpcMessageEvent, a, b);
  }
}

/**
 * @generated from message discordpackage.GrpcMessage
 */
export class GrpcMessage extends Message<GrpcMessage> {
  /**
   * @generated from field: string message_id = 1;
   */
  messageId = "";

  /**
   * @generated from field: optional string content = 2;
   */
  content?: string;

  /**
   * @generated from field: optional string file_url = 3;
   */
  fileUrl?: string;

  /**
   * @generated from field: string channel_id = 4;
   */
  channelId = "";

  /**
   * @generated from field: string created_at = 5;
   */
  createdAt = "";

  /**
   * @generated from field: string updated_at = 6;
   */
  updatedAt = "";

  /**
   * @generated from field: optional string deleted_at = 7;
   */
  deletedAt?: string;

  /**
   * @generated from field: optional string deleted_by = 8;
   */
  deletedBy?: string;

  /**
   * @generated from field: discordpackage.GrpcMemberProfile author = 9;
   */
  author?: GrpcMemberProfile;

  constructor(data?: PartialMessage<GrpcMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "discordpackage.GrpcMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "file_url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "created_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "updated_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "deleted_at", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "deleted_by", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 9, name: "author", kind: "message", T: GrpcMemberProfile },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcMessage {
    return new GrpcMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcMessage {
    return new GrpcMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcMessage {
    return new GrpcMessage().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcMessage | PlainMessage<GrpcMessage> | undefined, b: GrpcMessage | PlainMessage<GrpcMessage> | undefined): boolean {
    return proto3.util.equals(GrpcMessage, a, b);
  }
}

